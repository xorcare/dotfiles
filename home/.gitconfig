[advice]
# git config --global advice.addIgnoredFile false
addIgnoredFile = false

[apply]

# Detect whitespace errors when applying a patch
#
# git config --global apply.whitespace 'fix'
whitespace = fix

[init]

# Sets overriding the default branch name e.g. when initializing a new repository.
# https://git-scm.com/docs/git-config#Documentation/git-config.txt-initdefaultBranch
#
# git config --global init.defaultBranch main
defaultBranch=main

[core]

# Use custom `.gitignore` and `.gitattributes`
#
# git config --global core.excludesFile '~/.gitignore'
excludesFile = ~/.gitignore
# git config --global core.attributesFile '~/.gitattributes'
attributesFile = ~/.gitattributes

# Make `git rebase` safer on macOS
# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
#
# git config --global core.trustCTime false
trustCTime = false

# Prevent showing files whose names contain non-ASCII symbols as unversioned.
# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
#
# git config --global core.preComposeUnicode false
preComposeUnicode = false

# Speed up commands involving untracked files such as `git status`.
# https://git-scm.com/docs/git-update-index#_untracked_cache
#
# git config --global core.untrackedCache true
untrackedCache = true

[rebase]
# Automatically create a temporary stash before the operation begins,
# and apply it after the operation ends. This means that you can run
# rebase on a dirty worktree. However, use with care: the final stash
# application after a successful rebase might result
# in non-trivial conflicts.
#
# git config --global rebase.autoStash true
autoStash = true
# If set to true, git rebase will use abbreviated command names in the todo list
# https://mirrors.edge.kernel.org/pub/software/scm/git/docs/git-config.html
#
# git config --global rebase.abbreviateCommands true
abbreviateCommands = true

[rerere]

# git config --global rerere.enabled true
enabled = true

[color]

# Use colors in Git commands that are capable of colored output when
# outputting to the terminal. (This is the default setting in Git â‰¥ 1.8.4.)
#
# git config --global color.ui auto
ui = auto

[color "branch"]
current = yellow reverse
local = yellow
remote = green


[color "diff"]
# Meta info
meta = yellow bold
# Line info
frag = magenta bold
# Deletions
old = red
# Additions
new = green

whitespace = red reverse

[color "status"]
added = yellow
changed = green
untracked = cyan

[alias]

ali = "!git config --get-regexp '^alias\\.' | cut -c 7- | sed 's/ / = /'"
aliases = "!git config --get-regexp '^alias\\.' | cut -c 7- | sed 's/ / = /'"

ad = add
bi = bisect
br = branch -v
cl = clone
ci = commit
cn = clean
gr = grep
in = init
lo = log

# Fetch
ft = fetch
fta = fetch --all

# Checkout
ch = checkout
chf = checkout -f
chb = checkout -b

# Commit
cm = commit
cml = commit --all
cmd = commit --amend
cmt = commit --amend --no-edit
cma = commit -a --amend --no-edit

# Cherry-pick
cp = cherry-pick
cpe = cherry-pick --edit
cpc = cherry-pick --continue
cps = cherry-pick --skip
cpa = cherry-pick --abort
cpq = cherry-pick --quit

# Push
ps = push
psf = push -f

## Diff
df = diff --color
dfh = df HEAD
dff = df FETCH_HEAD

## Pull
pl = pull
plr = pull --rebase

# Merge
mr = merge
mra = merge --abort
mrc = merge --continue
mrq = merge --quit

# Rebase
rb = rebase
rbi = rebase -i
rba = rebase --abort
rbc = rebase --continue
rbo = rebase --onto
rbe = rebase --edit-todo

rs = reset
rsh = reset --hard
rsl = reset HEAD~1

rt = remote -v

sw = show

# View the current working tree status using the short format
st = status
sts = status -s
stl = status --long

# Stash
ss = stash
ssu = stash --include-untracked
ssa = stash apply
ssl = stash list
sss = stash show
ssd = stash drop
ssc = stash clear
sv = !git stash --include-untracked && git stash apply stash@{0}

# Functional aliases

ty = cat-file -t
dp = cat-file -p

ls = log -1 HEAD
ll = log --graph --abbrev-commit --pretty=format:'%C(red)%h%C(reset) - %s %C(red)by %C(blue)\"%an\" <%ae> %C(green)(%cr)%C(yellow)%d'

# git wip: What the heck was I just doing?
# https://carolynvanslyck.com/blog/2020/12/git-wip
wip = for-each-ref --sort='authordate:iso8601' --format=' %(color:green)%(authordate:relative)%09%(color:white)%(refname:short)' refs/heads

[diff "bin"]

# Use `hexdump` to diff binary files
textConv = hexdump -v -C

[help]

# Automatically correct and execute mistyped commands
#
# git config --global help.autoCorrect 10
autoCorrect = 10

[merge]

# Include summaries of merged commits in newly created merge commit messages
#
# git config --global merge.log true
log = true

[push]

# git config --global push.default 'simple'
default = simple

# git config --global push.autoSetupRemote true
autoSetupRemote = true

[submodule]

# git config --global submodule.recurse false
recurse = false

[url "https://github.com/"]
insteadOf = git://github.com/
[url "git@gitlab.com:"]
pushInsteadOf = https://gitlab.com/
[url "git@github.com:"]
pushInsteadOf = https://github.com/
[url "git@bitbucket.org:"]
pushInsteadOf = https://bitbucket.org/

[include] ; https://git-scm.com/docs/git-config#_includes
# `~/.gitconfig.local` it will store the global settings, but unlike
# `~/.gitconfig` only those that are connected to a specific computer so-as
# through a standard file, the settings are synchronized the same on all
# computers that I usually use.
# For example: `user.name` `user.email` `user.signingkey` etc...
#
# To add global parameters, use: git config --file ~/.gitconfig.local
# For example: git config --file ~/.gitconfig.local user.name Lucky
path = ~/.gitconfig.local
